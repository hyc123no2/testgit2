创建版本库：
1、 创建一个空目录
2、版本库初始化：#git init

查看仓库当前状态：#git status
查看文件差异：#git diff filename

查看提交历史记录：#git log/ git log --pretty=oneline
回退到上一个版本：#git reset --hard HEAD^    PS:上N个版本，HEAD~N
回退到指定版本：git reset --hard commit_id
查看命令历史：#git reflog
取消回退：#git reset --hard  ID(被回退版本) 

文件往版本库添加需要的两个步骤：
1、用git add 把文件添加进去，实际上就是把文件修改添加到暂存区（stage）；
2、用git commit 提交更改，实际上就是把暂存区的所有内容提交到当前分支。

查看工作区和版本库里面最新版本的区别：
#git diff HEAD -- filename
=========
针对于撤销修改
让文件回到最近一次git commit或git add时的状态，即撤销掉工作区中修改
#git checkout -- filename
把暂存区的修改撤销掉（unstage），重新放回工作区
#git reset HEAD filename
=========
将所有修改过的文件加入暂存区
#git add -u
无须变更列表，直接将登记在暂存区中的内容提交
#git commit

#git pull mirror master
#git push home

添加文件并提交
#git add -A
#git commit -m "initialized"
为初始提交建立一个里程碑："v1"
#git tag v1
开始在工作区中工作--修改文件并提交
#git commit -a

修改提交说明
#git commit -amend

删除误提交的文件
#git rm --cached winxp.img
#git commit --amend
变基操作
#git rebase -i <commit-id>^

正确的版本控制系统，一次只干一件事

可以显示修改后的差异
#git diff
暂存区中显示修改后的差异
#git diff --cached

保存工作进度
#git stash
#git checkout <newbranch>
#git checkout <orignal_branch>
#git stash pop
 

配置变量，用户主目录下.gitconfig或/etc/gitconfig 
#git config --global user.name "hyc"
#git config --global user.email hyc...

对所有用户设置别名
#git config --system alias.st status

只在本用户的全局配置中添加别名
$git config --global alias.st status
在git命令输出中开启颜色显示
$git config --global color.ui true

$cd /path/to/my/workspace
$git init demo
$cd demo
隐藏工作目录.git，就是git的版本库（repository）

#git commit -m "initialized."
-m：说明

显示版本库.git 目录所在的位置
#git rev-parse --git-dir
显示工作区根目录
#git rev-parse --show-toplevel
相对于工作区根目录的相对目录
#git rev-parse --show-prefix
显示从当前目录后退到工作区的根的深度
#git rev-parse --show-cdup

#git status -s 
#git status
#git log --stat

工作区(1)、暂存区(2)、HEAD(3)
1&2
#git diff
1&3
#git diff HEAD
2&3
#git diff --cached

清除工作区当前的改动
#git clean -fd
用暂存区刷新工作区
#git checkout .

保存当前工作进度
#git stash

#git log -l --pretty=oneline
#git log --graph --oneline

git访问

git重置
#git reset     
#git reset HEAD  撤销git add 更新到暂存区的内容

#git reset -- filename 
#git reset -- HEAD filename  仅将文件filename的改动撤出暂存区

#git reset --hard HEAD^
彻底撤销最近的提交。引用，暂存区、工作区均回退到上一次提交状态。
#git reflog master
#git reset --hard master@{1}

#git reset --soft HEAD^
工作区和暂存区不改变，但是引用向前回退一次。当对最新提交的提交说明或提交的更改不满意时，撤销最新的提交以便重新提交。

#git checkout  该命令的实质就是修改HEAD本身的指向，不会影响分支
“游标”

#cat .git/HEAD

#git reflog -1

#git checkout [-q] [<commit>] [--] <paths>..
重置的默认值是HEAD，而检出的默认值是暂存区（除非使用--hard参数，否则不重置工作区）


https://docs.docker.com/get-started/



















































































